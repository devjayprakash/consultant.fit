// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  active
  inactive
  deleted
}

model User {
  id                  String         @id @default(uuid())
  email               String         @unique
  clerkId             String         @unique
  first_name          String
  last_name           String
  profile_pic         String
  github_access_token String?
  created_at          DateTime       @default(now())
  active_project_id   String?
  status              UserStatus     @default(active)
  updated_at          DateTime       @updatedAt
  Project             Project[]
  UserSettings        UserSettings[]
}

model Project {
  id          String       @id @default(uuid())
  name        String
  userId      String
  belongsTo   User         @relation(fields: [userId], references: [id])
  description String
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  Sprint      Sprint[]
  TaskStatus  TaskStatus[]
}

model Sprint {
  id         String   @id @default(uuid())
  name       String
  projectId  String
  start_date DateTime
  end_date   DateTime
  belongsTo  Project  @relation(fields: [projectId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Task       Task[]
}

model Task {
  id           String     @id @default(uuid())
  name         String
  description  String
  status       TaskStatus @relation(fields: [taskStatusId], references: [id])
  sprintId     String?
  belongsTo    Sprint?    @relation(fields: [sprintId], references: [id])
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  taskStatusId String
}

model TaskStatus {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  project_id String
  belongsTo  Project  @relation(fields: [project_id], references: [id])
  Task       Task[]
}

model UserSettings {
  id                      String   @id @default(uuid())
  userId                  String
  belongsTo               User     @relation(fields: [userId], references: [id])
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt
  notfication             Boolean  @default(true)
  auto_sprint_name        Boolean  @default(true)
  default_sprint_duration Int      @default(14)
}

model user_repo_link {
  user_id    String
  repo_id    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id([user_id, repo_id])
}
